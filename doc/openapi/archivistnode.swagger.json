{
  "swagger": "2.0",
  "info": {
    "title": "Archivist Node API",
    "version": "1.0",
    "contact": {
      "name": "Jitsuin",
      "url": "https://www.jitsuin.com"
    }
  },
  "host": "jitsuin.readthedocs.io",
  "basePath": "/api/archivist/v1",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/archivist/v1/archivistnode": {
      "get": {
        "summary": "Get information about an archivist node",
        "description": "Returns the identified archivist node",
        "operationId": "ArchivistNode_GetArchivistNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ArchivistNodes"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to read the archivist node's information",
            "schema": {}
          },
          "404": {
            "description": "Returned when the identified archivist node does not exist",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "ArchivistNode"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ArchivistNodes": {
      "type": "object",
      "example": {
        "identity": "quorum-0",
        "blockchain_nodes": [
          {
            "validator_pubkey": {
              "kty": "EC",
              "crv": "P-256K",
              "x": "VBKHictTWJC-3sqknXCb8MI4IxTc3c_My7lnem2C74E=",
              "y": "ItNeb5d-6vEHkvtUOcDYrEADxsZXeOCJm18pQWntenE=",
              "d": ""
            },
            "block_height": "38773",
            "connection_status": "REACHABLE",
            "syncing": null,
            "timestamp_committed": "2019-01-01T12:00:27Z",
            "timestamp_created": "2019-01-01T12:00:27Z",
            "peers": [
              {
                "validator_pubkey": {
                  "kty": "EC",
                  "crv": "P-256K",
                  "x": "o0uZ8ix5DE42srPCw1o22wYibkHGkvyCuLVqwcVAxb0=",
                  "y": "W43sUjWg-ociR2x3CcAlWeOqc6oDkYui1JLup1q-ojU=",
                  "d": ""
                },
                "connection_status": "REACHABLE"
              },
              {
                "validator_pubkey": {
                  "kty": "EC",
                  "crv": "P-256K",
                  "x": "5HcU1PJgTe0LGyGxKFrIPFZWdTbxPySfi6bKxdQeO8A=",
                  "y": "dEpMURyTwEGzpgIgLdm4Csl1BgF6H39tb1Kf8wLLhVI=",
                  "d": ""
                },
                "connection_status": "REACHABLE"
              }
            ]
          }
        ]
      },
      "properties": {
        "identity": {
          "type": "string",
          "description": "The identity of the archivistnode blockchain",
          "title": "archivistnode",
          "readOnly": true
        },
        "blockchain_nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BlockchainNode"
          },
          "description": "Status information for the blockchain nodes belonging to this  archivist node. Each blockchain node further contains information  about any connected peers. Note that the peer lists for each blockchain  node will often overlap",
          "readOnly": true
        }
      },
      "description": "Describes the status of the archivist node."
    },
    "v1BlockchainNode": {
      "type": "object",
      "properties": {
        "validator_pubkey": {
          "$ref": "#/definitions/v1JSONWebKey",
          "description": "Blockchain node Public key, used to validate transactions. A  Secp256k1 public key. Formatted as  a JWK accodring to RFC 7517 (JWK), RFC 7518 (JWA) and  draft-ietf-cose-webauthn-algorithms-00. Note in particular,  that x, y are the base64url encoding of the uncompressed key.",
          "readOnly": true
        },
        "block_height": {
          "type": "string",
          "format": "uint64",
          "description": "For the local node, the height of the last committed block",
          "readOnly": true
        },
        "connection_status": {
          "$ref": "#/definitions/v1ConnectionStatus",
          "description": "An indication of the nodes connection status.",
          "readOnly": true
        },
        "timestamp_committed": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when consensus was achieved for the block at `block_height` (RFC 3339) obtained from the block info of the 'latest' block.",
          "readOnly": true
        },
        "timestamp_created": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of creation of the genesis block (RFC 3339)",
          "readOnly": true
        },
        "syncStatus": {
          "$ref": "#/definitions/v1SyncStatus",
          "description": "IF present, the node is syncing.",
          "readOnly": true
        },
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PeerBlockchainNode"
          },
          "description": "List of peer blockchain nodes. ",
          "readOnly": true
        }
      }
    },
    "v1ConnectionStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "REACHABLE",
        "UNREACHABLE"
      ],
      "default": "UNSPECIFIED"
    },
    "v1JSONWebKey": {
      "type": "object",
      "properties": {
        "keyEC": {
          "$ref": "#/definitions/v1JSONWebKeyEC"
        }
      }
    },
    "v1JSONWebKeyEC": {
      "type": "object",
      "example": {
        "kty": "EC",
        "crv": "P-256K",
        "x": "VBKHictTWJC-3sqknXCb8MI4IxTc3c_My7lnem2C74E=",
        "y": "ItNeb5d-6vEHkvtUOcDYrEADxsZXeOCJm18pQWntenE=",
        "d": ""
      },
      "properties": {
        "kty": {
          "$ref": "#/definitions/v1JSONWebKeyType",
          "description": "The type of the key. MUST be 'EC'",
          "title": "Must be \"EC\""
        },
        "crv": {
          "type": "string",
          "description": "The curve name for the key.  6.2.1.1 rfc 7518, 3.1 draft-ietf-cose-webauthn-algorithms-00 MUST be one of P-256K, P-256, P-384, P-521",
          "title": "CurveName crv = 2 [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {",
          "maxLength": 64
        },
        "x": {
          "type": "string",
          "description": "The base64url encoding of the x component for the uncompressed point. 6.2.1.2 rfc 7518",
          "maxLength": 256
        },
        "y": {
          "type": "string",
          "description": "The base64url encoding of the y component the uncompressed point 6.2.1.3 rfc 7518",
          "maxLength": 256
        },
        "d": {
          "type": "string",
          "description": "Present only for PRIVATE keys. The base64url encoding of the private  key 6.2.2.1 rfc 7518",
          "maxLength": 2048
        }
      },
      "description": "A public or private Elliptic Curve Key according to RFC 7518. As an extension, we permit the crv value P-256K1 to indicate  the SEC2 P-256K1 aka Secp256k1 curve is used.  See draft-ietf-cose-webauthn-algorithms-00, and  http://www.secg.org/sec2-v2.pdf"
    },
    "v1JSONWebKeyType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "EC",
        "RSA",
        "OCT"
      ],
      "default": "UNSPECIFIED",
      "title": "JSONWebKey.Type The key types declared in 6.1 rfc-7518"
    },
    "v1PeerBlockchainNode": {
      "type": "object",
      "properties": {
        "validator_pubkey": {
          "$ref": "#/definitions/v1JSONWebKey",
          "description": "The Blockchain node Public key, used to validate transactions.  A Secp256k1 public key. Formatted as  a JWK accodring to RFC 7517 (JWK), RFC 7518 (JWA) and  draft-ietf-cose-webauthn-algorithms-00. Note in particular,  that x, y are the base64url encoding of the uncompressed key.",
          "readOnly": true
        },
        "connection_status": {
          "$ref": "#/definitions/v1ConnectionStatus",
          "description": "An indication of the peers connection status.",
          "readOnly": true
        }
      }
    },
    "v1SyncStatus": {
      "type": "object",
      "properties": {
        "starting_block": {
          "type": "string",
          "format": "uint64",
          "description": "When syncing, the starting block.",
          "readOnly": true
        },
        "current_block": {
          "type": "string",
          "format": "uint64",
          "description": "When syncing, the current block.",
          "readOnly": true
        },
        "highest_block": {
          "type": "string",
          "format": "uint64",
          "description": "When syncing, the highest block.",
          "readOnly": true
        }
      }
    }
  }
}
