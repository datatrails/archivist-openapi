{
  "swagger": "2.0",
  "info": {
    "title": "Identity Provider Management API",
    "version": "1.0",
    "contact": {
      "name": "Jitsuin",
      "url": "https://www.jitsuin.com"
    }
  },
  "host": "jitsuin.readthedocs.io",
  "basePath": "/archivist/v1",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/archivist/v1/identityproviders": {
      "get": {
        "summary": "Get list of identity providers",
        "description": "Returns a paginated list of IdentityProviders",
        "operationId": "ListIdentityProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListIdentityProvidersResponse"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to list the identity providers.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "order_by",
            "description": "Specify the sort order for the results. By display_name and by named\nextended attribute are supported.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "DISPLAY_NAME",
              "EXTENDED_ATTRIBUTE"
            ],
            "default": "UNSPECIFIED"
          },
          {
            "name": "page_size",
            "description": "Maximum identity providers per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "The next_page_token returned from a previous list request if any.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "display_name",
            "description": "Further fields are bound to query parameters and act to filter the result.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IdentityProviders"
        ]
      }
    },
    "/archivist/v1/{identity}": {
      "get": {
        "summary": "Get an identity provider",
        "description": "Returns the identity provider associated with the identifying Relative Resource Name, e.g. `identityproviders/08838336-c357-460d-902a-3aba9528dd22`",
        "operationId": "GetIdentityProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IdentityProvider"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to read the identity provider.",
            "schema": {}
          },
          "404": {
            "description": "Returned when a identity provider with the identity does not exist.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "identity",
            "description": "Unique identification for the identity provider. Relative Resource Name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdentityProviders"
        ]
      }
    }
  },
  "definitions": {
    "ListIdentityProvidersRequestOrderBy": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "DISPLAY_NAME",
        "EXTENDED_ATTRIBUTE"
      ],
      "default": "UNSPECIFIED",
      "title": "Supported sort orders"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AzureActiveDirectoryIdentityProvider": {
      "type": "object",
      "example": {
        "api_id": "9876543210-fedc-8765-4321-cba9876543210",
        "consent_uri": "https://contoso-avid.prod.jitsuin.io"
      },
      "properties": {
        "api_id": {
          "type": "string",
          "description": "Azure API service principal ID.",
          "maxLength": 32
        },
        "consent_uri": {
          "type": "string",
          "description": "Azure Administrator consent URI.",
          "maxLength": 4096
        }
      },
      "description": "Describes an Azure Active Directory identity provider"
    },
    "v1GenericProvider": {
      "type": "object",
      "example": {},
      "description": "Describes an generic Open ID Connect identity provider"
    },
    "v1IdentityProvider": {
      "type": "object",
      "example": [
        {
          "identity": "identityproviders/08838336-c357-460d-902a-3aba9528dd22",
          "display_name": "Synsation Azure Active Directory",
          "description": "Primary Azure Active Directory for Synsation Corporation, IL, USA",
          "oauth2_scope": "https://synsation-avid.prod.jitsuin.io/user_impersonation",
          "callback_host": "https://synsation-avid.prod.jitsuin.io",
          "provider_uri": "https://login.microsoftonline.com/09123456789-abcd-1234-5678-0123456789abc/v2.0",
          "client_id": "9876543210-fedc-8765-4321-cba9876543210",
          "audiences": "https://synsation-avid.prod.jitsuin.io",
          "jwks": "https://login.microsoftonline.com/09123456789-abcd-1234-5678-0123456789abc/discovery/v2.0/keys",
          "issuer": "https://sts.windows.net/09123456789-abcd-1234-5678-0123456789abc/",
          "azure_active_directory": {
            "api_id": "9876543210-fedc-8765-4321-cba9876543210",
            "consent_uri": "https://contoso-avid.prod.jitsuin.io"
          },
          "extended_attributes": {
            "Azure Subscription": "09123456789-abcd-1234-5678-0123456789abc",
            "Department": "OT management"
          }
        }
      ],
      "properties": {
        "identity": {
          "type": "string",
          "description": "Unique identification for the identity provider, Relative Resource Name.",
          "title": "identityproviders/{UUID}",
          "maxLength": 128
        },
        "display_name": {
          "type": "string",
          "description": "Customer friendly name for the identity provider.",
          "maxLength": 128
        },
        "oauth2_scope": {
          "type": "string",
          "description": "Used to specify the scope of the requested authorisation in OAuth.",
          "maxLength": 4096
        },
        "callback_host": {
          "type": "string",
          "description": "The Relying Party callback host for the authentication response.",
          "maxLength": 4096
        },
        "provider_uri": {
          "type": "string",
          "description": "The OpenID Provider URI.",
          "maxLength": 4096
        },
        "client_id": {
          "type": "string",
          "description": "The client identifier of the Resource Provider at the OpenID Provider.",
          "maxLength": 4096
        },
        "audiences": {
          "type": "string",
          "description": "URIs of clients for whom the Open ID Connect tokens are valid.",
          "maxLength": 4096
        },
        "jwks": {
          "type": "string",
          "description": "JSON Web Token public signing key URI.",
          "maxLength": 4096
        },
        "issuer": {
          "type": "string",
          "description": "JSON Web Token issuer.",
          "maxLength": 4096
        },
        "extended_attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Customer defined extended attributes. keys are max_length 1024, values\nmax_length 4096"
        },
        "GenericProvider": {
          "$ref": "#/definitions/v1GenericProvider",
          "description": "Generic Open ID Connect identity provider."
        },
        "azure_active_directory": {
          "$ref": "#/definitions/v1AzureActiveDirectoryIdentityProvider",
          "description": "Azure Active Directory identity provider specific attributes."
        }
      },
      "description": "Describes an identity provider"
    },
    "v1ListIdentityProvidersResponse": {
      "type": "object",
      "properties": {
        "identity_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1IdentityProvider"
          },
          "title": "There will be at most ListIdentityProvidersRequest.page_size items"
        },
        "next_page_token": {
          "type": "string",
          "description": "Token to retrieve the next page of results or empty if there are none."
        }
      }
    }
  }
}
