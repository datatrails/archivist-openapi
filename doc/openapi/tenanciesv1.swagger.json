{
  "swagger": "2.0",
  "info": {
    "title": "User Management API",
    "description": "Simple API for User Management",
    "version": "1.0",
    "contact": {
      "name": "Jitsuin",
      "url": "https://www.jitsuin.com"
    }
  },
  "tags": [
    {
      "name": "Users"
    }
  ],
  "basePath": "/_api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/archivist/v1/tenancies/caps": {
      "get": {
        "summary": "Fetch map of resource: caps for authenticated principal's tenant",
        "description": "Not stable or officially supported. Fetch the map of resource: caps for authenticated principal's tenant",
        "operationId": "Tenancies_GetLimitsForCurrentTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLimitsForCurrentTenantResponse"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Tenancies",
          "Unsupported"
        ]
      }
    },
    "/archivist/v1/tenancies/root_principals": {
      "get": {
        "summary": "Fetch the current list of tenant root user principals",
        "description": "Fetch the current list of tenant root user principals.",
        "operationId": "Tenancies_GetTenantRootPrincipals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTenantRootPrincipalsResponse"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to update the root principals.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Tenancies"
        ]
      },
      "patch": {
        "summary": "Update the list of tenant root user principals",
        "description": "Replace the list of tenant root user principals.  Note that you are not able to remove yourself from the list.",
        "operationId": "Tenancies_UpdateTenantRootPrincipals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTenantRootPrincipalsResponse"
            }
          },
          "400": {
            "description": "Returned when the request is badly formed.  Including, but not limited to, attempting to remove yourself as a root uesr principal.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to update the root principals.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateTenantRootPrincipalsRequest"
            }
          }
        ],
        "tags": [
          "Tenancies"
        ]
      }
    },
    "/archivist/v1/tenancies/tenantid": {
      "get": {
        "summary": "Get ID of tenant associated with issuer and/or subject, and create if not exists.",
        "description": "Get ID of tenant associated with issuer and/or subject, and create if not exists.",
        "operationId": "Tenancies_GetTenantID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TenantIDResponse"
            }
          },
          "400": {
            "description": "Returned when the user doesn't provide an issuer or subject to filter on.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to retrieve the tenant id.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "issuer",
            "description": "Issuer of the principal identity.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "description": "Unique identifier of the principal (within issuer context.) Used if social.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_social",
            "description": "Is the issuer social?",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "email",
            "description": "Email address of the principal.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "oid",
            "description": "B2C User ID if available",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_new_user",
            "description": "True if the user was just created (only valid when invokted from b2c)",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Tenancies"
        ]
      }
    },
    "/archivist/v1/tenancies/{tenant_uuid}/users": {
      "get": {
        "summary": "List Users",
        "description": "Returns a list of Users active in or invited to the tenant.",
        "operationId": "Tenancies_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersResponse"
            }
          },
          "400": {
            "description": "Returned when the request is badly formed.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to read the users.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the identified users don't exist.",
            "schema": {}
          },
          "500": {
            "description": "Returned when the underlying storage system returns an error.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant_uuid",
            "description": "tenant UUID, found in the identifier `tenancies/{UUID}`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_uuid",
            "description": "user UUID, found in the identifier `users/{UUID}`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userprincipalname",
            "description": "Unique user principal name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "issuer",
            "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "description": "unique identifier of the principal (within issuer context)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_status",
            "description": "User status, either active or pending.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATUS_UNSPECIFIED",
              "ACTIVE",
              "INVITED"
            ],
            "default": "STATUS_UNSPECIFIED"
          }
        ],
        "tags": [
          "Tenancies"
        ]
      }
    },
    "/archivist/v1/tenancies/{tenant_uuid}/users/{user_uuid}": {
      "delete": {
        "summary": "Deletes User",
        "description": "Deletes a User from the tenancy.",
        "operationId": "Tenancies_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "400": {
            "description": "Returned when the request is badly formed.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to read the user.",
            "schema": {}
          },
          "500": {
            "description": "Returned when the underlying storage system returns an error.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant_uuid",
            "description": "tenant UUID, found in the identifier `tenancies/{UUID}`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_uuid",
            "description": "user UUID, found in the identifier `users/{UUID}`",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Tenancies"
        ]
      }
    },
    "/archivist/v1/tenancies/{tenant_uuid}/users:caps": {
      "get": {
        "summary": "Get the remaining number of users that can be added to the tenant.",
        "description": "Not stable or officially supported. Get the remaining number of users that can be added to the tenant.",
        "operationId": "Tenancies_GetUserCaps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Caps"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "429": {
            "description": "Returned when a user exceeds their subscription's rate limit for requests.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant_uuid",
            "description": "tenant UUID, found in the identifier `tenancies/{UUID}`",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "Unsupported"
        ]
      }
    },
    "/archivist/v1/tenancies/{tenant_uuid}/users:checkactive": {
      "get": {
        "summary": "Check Active User",
        "description": "Checks if a user has access to the tenant.",
        "operationId": "Tenancies_CheckActiveUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "400": {
            "description": "Returned when the request is badly formed.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to read the users.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the identified user doesn't exist.",
            "schema": {}
          },
          "500": {
            "description": "Returned when the underlying storage system returns an error.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant_uuid",
            "description": "tenant UUID, found in the identifier `tenancies/{UUID}`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_uuid",
            "description": "user UUID, found in the identifier `users/{UUID}`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userprincipalname",
            "description": "Unique user principal name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "issuer",
            "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "description": "unique identifier of the principal (within issuer context)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tenancies"
        ]
      }
    },
    "/archivist/v1/tenancies/{tenant_uuid}/users:checkinvited": {
      "get": {
        "summary": "Check Invited User",
        "description": "Checks if there is an outstanding invite for the user. Once the invite is redeemed the user will be active.",
        "operationId": "Tenancies_CheckInvitedUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "400": {
            "description": "Returned when the request is badly formed.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to read the users.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the identified user doesn't exist.",
            "schema": {}
          },
          "500": {
            "description": "Returned when the underlying storage system returns an error.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant_uuid",
            "description": "tenant UUID, found in the identifier `tenancies/{UUID}`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_uuid",
            "description": "user UUID, found in the identifier `users/{UUID}`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userprincipalname",
            "description": "Unique user principal name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "issuer",
            "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "description": "unique identifier of the principal (within issuer context)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tenancies"
        ]
      }
    },
    "/archivist/v1/users/{uuid}/tenants": {
      "get": {
        "summary": "List User Tenants",
        "description": "Returns a list of tenancies the user has access to.",
        "operationId": "Users_ListUserTenants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserTenantsResponse"
            }
          },
          "400": {
            "description": "Returned when the request is badly formed.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user is not authorized to read the user.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the identified user don't exist.",
            "schema": {}
          },
          "500": {
            "description": "Returned when the underlying storage system returns an error.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "description": "active directory object id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/archivist/v1/users/{uuid}:caps": {
      "get": {
        "summary": "Get the number of additional tenants a user is allowed to create or join",
        "description": "Not stable or officially supported. Get the number of additional tenants a user is allowed to create or join",
        "operationId": "Users_GetUserTenantCaps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Caps"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "429": {
            "description": "Returned when a user exceeds their subscription's rate limit for requests.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "description": "user UUID, found in the identifier `users/{UUID}`",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "Unsupported"
        ]
      }
    },
    "/archivist/v1/tenancies:openapi": {
      "get": {
        "summary": "Get OpenAPI spec for Tenancies",
        "description": "Get OpenAPI v2.0 spec for Tenancies",
        "operationId": "Tenancies_GetOpenAPI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "429": {
            "description": "Returned when a user exceeds their subscription's rate limit for requests.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Tenancies"
        ]
      }
    },
    "/archivist/v1/tenancies:openapi-ui": {
      "get": {
        "summary": "Get OpenAPI UI for Tenancies",
        "description": "Get OpenAPI v2.0 UI for Tenancies",
        "operationId": "Tenancies_GetOpenAPIUI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system.",
            "schema": {}
          },
          "429": {
            "description": "Returned when a user exceeds their subscription's rate limit for requests.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Tenancies"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Cap": {
      "type": "object",
      "properties": {
        "resource_type": {
          "type": "string",
          "description": "String identifying the capped resource type"
        },
        "resource_remaining": {
          "type": "string",
          "format": "int64",
          "description": "Number of capped resources remaining"
        }
      }
    },
    "v1Caps": {
      "type": "object",
      "properties": {
        "caps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Cap"
          },
          "description": "List of relevant capped resources"
        }
      }
    },
    "v1GetLimitsForCurrentTenantResponse": {
      "type": "object",
      "properties": {
        "limits": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "map of caps for authenticated principal's tenancy",
          "readOnly": true
        }
      }
    },
    "v1GetTenantRootPrincipalsResponse": {
      "type": "object",
      "example": {
        "root_principals": [
          {
            "display_name": "Bob Smith",
            "issuer": "job.idp.server/1234",
            "subject": "08838336-c357-460d-902a-3aba9528dd22",
            "email": "bob@job"
          }
        ]
      },
      "properties": {
        "root_principals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2Principal"
          }
        }
      },
      "description": "List of tenant root user principals",
      "title": "A list of current tenant root user principals"
    },
    "v1ListTenantsResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TenantResponse"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      }
    },
    "v1ListUsersResponse": {
      "type": "object",
      "example": {
        "users": [
          {
            "identity": "users/87d349ed-44d7-43e1-9a83-5f2406dee5bd",
            "userprincipalname": "frank123@example.com",
            "issuer": "frank@example.com",
            "subject": "franky123",
            "user_status": "ACTIVE"
          }
        ],
        "page_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6InN0dW50aWR"
      },
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          }
        },
        "next_page_token": {
          "type": "string",
          "description": "Token to retrieve the next page of results or empty if there are none."
        }
      },
      "description": "List of Users (or the next page in a continuing  list request)"
    },
    "v1QuorumNetwork": {
      "type": "object",
      "properties": {
        "node_address": {
          "type": "string",
          "description": "scheme://host:port for the tenants resident quorum node",
          "maxLength": 1024,
          "minLength": 1
        },
        "tessera_address": {
          "type": "string",
          "description": "scheme://host:port of tenants resident tessera node if privacy preserving transactions are enabled for the tenant",
          "maxLength": 1024,
          "minLength": 1
        },
        "tessera_key": {
          "type": "string",
          "description": "Tessera key.",
          "title": "DLT tessera public key. Not currently used anywhere?",
          "maxLength": 1024,
          "minLength": 1
        },
        "topic": {
          "type": "string",
          "description": "Event Sender Topic.",
          "maxLength": 1024,
          "minLength": 1
        },
        "is_private": {
          "type": "boolean",
          "description": "Is the tessaera private?"
        }
      },
      "title": "Models the interface between creators and the blockchain. Used in an internal LRU for each\ncreator service"
    },
    "v1TenantIDResponse": {
      "type": "object",
      "properties": {
        "identity": {
          "type": "string",
          "description": "tenant identity `{UUID}`",
          "readOnly": true
        },
        "tier": {
          "$ref": "#/definitions/v1Tier",
          "description": "tenant tier FREE or PREMIUM",
          "readOnly": true
        }
      }
    },
    "v1TenantLimitsResponse": {
      "type": "object",
      "properties": {
        "identity": {
          "type": "string",
          "description": "tenant identity `{UUID}`",
          "readOnly": true
        },
        "limits": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "v1TenantResponse": {
      "type": "object",
      "properties": {
        "identity": {
          "type": "string",
          "description": "tenant identity `{UUID}`",
          "readOnly": true
        },
        "root_principal": {
          "$ref": "#/definitions/v2Principal",
          "title": "root_principal is DEPRECATED and will be removed in a future release\nit remains for old installations and for the one true tenant IDP issuer"
        },
        "wallet_key_name": {
          "type": "string"
        },
        "wallet_address": {
          "type": "string"
        },
        "root_principals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2Principal"
          }
        },
        "limits": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "storage_integrity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2StorageIntegrity"
          },
          "description": "We dont need these as we can figure out if things enabled from the limits map\nabove\nstorage_integrity includes the enabled storage_integrity values for the tenant.\nCurrently we only support LEDGER *and* TENANT_STORAGE or just TENANT_STORAGE\nThis is oly here for migration to new ProofMechanism - will be reserved at a\nlater date."
        },
        "proof_mechanism": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2ProofMechanism"
          },
          "title": "proof_mechanism includes the enabled proof_mechanism values for the tenant.\nCurrently we only support KHIPU *and* SIMPLE_HASH or just SIMPLE_HASH"
        },
        "tier": {
          "$ref": "#/definitions/v1Tier"
        },
        "quorum_networks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1QuorumNetwork"
          },
          "title": "map of DLT networks indexed by chain ID"
        }
      },
      "title": "Tenant information"
    },
    "v1Tier": {
      "type": "string",
      "enum": [
        "TIER_UNSPECIFIED",
        "FREE",
        "PREMIUM"
      ],
      "default": "TIER_UNSPECIFIED"
    },
    "v1TopicFromPubKeyResponse": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        }
      }
    },
    "v1UpdateTenantRootPrincipalsRequest": {
      "type": "object",
      "example": {
        "root_principals": [
          {
            "display_name": "Bob Smith",
            "issuer": "job.idp.server/1234",
            "subject": "08838336-c357-460d-902a-3aba9528dd22",
            "email": "bob@job"
          }
        ]
      },
      "properties": {
        "root_principals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2Principal"
          },
          "description": "New list of tenant root user principals"
        }
      },
      "description": "Update the list of tenant root user principals",
      "title": "Update the list of tenant root user principals"
    },
    "v1User": {
      "type": "object",
      "example": {
        "identity": "users/87d349ed-44d7-43e1-9a83-5f2406dee5bd",
        "userprincipalname": "frank123@example.com",
        "issuer": "frank@example.com",
        "subject": "franky123",
        "user_status": "ACTIVE"
      },
      "properties": {
        "identity": {
          "type": "string",
          "description": "user identity `{UUID}`",
          "maxLength": 1024
        },
        "userprincipalname": {
          "type": "string",
          "description": "Unique user principal name."
        },
        "issuer": {
          "type": "string",
          "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
          "maxLength": 1024
        },
        "subject": {
          "type": "string",
          "description": "unique identifier of the principal (within issuer context)",
          "maxLength": 1024
        },
        "user_status": {
          "$ref": "#/definitions/v1UserStatus",
          "description": "User status, either active or pending."
        }
      },
      "description": "User Data"
    },
    "v1UserStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "ACTIVE",
        "INVITED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "status of the user in the tenancy"
    },
    "v2Principal": {
      "type": "object",
      "example": {
        "issuer": "job.idp.server/1234",
        "subject": "bob@job"
      },
      "properties": {
        "issuer": {
          "type": "string",
          "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
          "maxLength": 1024
        },
        "subject": {
          "type": "string",
          "description": "unique identifier of the principal (within issuer context)",
          "maxLength": 1024
        },
        "display_name": {
          "type": "string",
          "description": "The displayable name of the end-user.  The name claim is prefered, followed by email claims, then a composite of  given_name, middle_name, family_name",
          "maxLength": 1024
        },
        "email": {
          "type": "string",
          "description": "The email for the end-user if available. If email_verified is  available it is preferd. Empty if neither email_verified or email  are provided by the IdP",
          "maxLength": 1024
        }
      },
      "description": "The principal description assured by the configured Identity  Provider. All values are according to OIDC id token claims and  standard claims.  See https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims"
    },
    "v2ProofMechanism": {
      "type": "string",
      "enum": [
        "PROOF_MECHANISM_UNSPECIFIED",
        "KHIPU",
        "SIMPLE_HASH",
        "TRIE_HASH"
      ],
      "default": "PROOF_MECHANISM_UNSPECIFIED"
    },
    "v2StorageIntegrity": {
      "type": "string",
      "enum": [
        "STORAGE_INTEGRITY_UNSPECIFIED",
        "LEDGER",
        "TENANT_STORAGE"
      ],
      "default": "STORAGE_INTEGRITY_UNSPECIFIED",
      "description": "Specifies how the asset data will be stored. This is set once on creation\nand does not change."
    },
    "v1ListUserTenantsResponse": {
      "type": "object",
      "example": {
        "tenants": [
          "tenancies/01038663-c357-470d-912a-3abc9528dd21",
          "tenancies/12147552-d466-381c-805b-4cbd1018ef30"
        ],
        "page_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6InN0dW50aWR"
      },
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "tenants in the form `tenancies/{UUID}`",
          "readOnly": true
        },
        "next_page_token": {
          "type": "string",
          "description": "Token to retrieve the next page of results or empty if there are none."
        }
      },
      "description": "List of tenancies the user belongs to (or the next page in a continuing  list request)"
    }
  }
}
